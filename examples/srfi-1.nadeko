;;;; list functions ;;;;

;;;;
;; Certain portions of this document -- the specific, marked segments of text describing the R5RS procedures -- were adapted with permission from the R5RS report.
;; All other text is copyright (C) Olin Shivers (1998, 1999). All Rights Reserved.
;; Permission is hereby granted, free of charge, to any? person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
;; The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
;;;;

;;; Constructors ;;;

(= (make-integers-from Number (List Number)) n
   (cons n (make-integers-from (+ n 1))))
(= (integers (List Number))
   (make-integers-from 0))




;;; Selectors ;;;

(= (list-ref Number (List a) (Option a)) i xs
   (nil? xs none
         (=? i 0 (some (car xs))
             (list-ref (- i 1) (cdr xs)))))


(= (take Number (List a) (List a)) n xs
   (nil? xs nil
         (=? n 0 nil
             (cons (car xs) (take (- n 1) (cdr xs))))))


(= (drop Number (List a) (List a)) i xs
   (nil? xs nil
         (=? i 0 xs (drop (- i 1) (cdr xs)))))


(= (take-right Number (List a) (List a)) i xs
   (drop (- (length xs) i) xs))


(= (drop-right Number (List a) (List a)) i xs
   (take (- (length xs) i) xs))


(= (split-at Number (List a) (Pair (List a) (List a))) i xs
   (pair (take i xs) (drop i xs)))


(= (last (List a) a) xs
   (nil? (cdr xs) (car xs) (last (cdr xs))))




;;; Miscellaneous ;;;

(= (length (List a) Number) xs
   (nil? xs 0 (+ 1 (length (cdr xs)))))


(= (append (List a) (List a) (List a)) xs1 xs2
   (nil? xs1 xs2
         (cons (car xs1) (append (cdr xs1) xs2))))


(= (reverse (List a) (List a)) xs
   (foldl cons nil xs))


(= (zip (List a) (List b) (List (Pair a b))) xs1 xs2
   (nil? xs1 nil
         (nil? xs2 nil
               (cons (pair (car xs1) (car xs2))
                     (zip (cdr xs1) (cdr xs2))))))


(= (zipWith (List a) (Fn a b c) (List b) (List c)) xs1 f xs2
   (nil? xs1 nil
         (nil? xs2 nil
               (cons (f (car xs1) (car xs2))
                     (zipWith (cdr xs1) f (cdr xs2))))))


;;(= unzip xs (unzip- nil nil (reverse xs)))


#|(= unzip- xs1 xs2 zipped
(nil? zipped
      (pair xs1 xs2)
      (unzip-
       (cons (fst (car zipped)) xs1)
       (cons (snd (car zipped)) xs2)
       (cdr zipped))))|#


(= (count1 (Fn a Bool) (List a) Number) pred xs
   (nil? xs 0
         (pred (car xs) (+ 1 (count1 pred (cdr xs)))
               (count1 pred (cdr xs)))))


(= (count2 (Fn a b Bool) (List a) (List b) Number)
   pred xs1 xs2
   (nil? xs1 0
         (nil? xs2 0
               (pred (car xs1) (car xs2) (+ 1 (count2 pred (cdr xs1) (cdr xs2)))
                     (count2 pred (cdr xs1) (cdr xs2))))))




;;; Fold, unfold & map ;;;

(= (foldl (Fn a b c) b (List a) c) f init xs
   (nil? xs init
         (foldl f (f (car xs) init) (cdr xs))))


(= (foldr (Fn a b c) b (List a) c) f init xs
   (nil? xs init
         (f (car xs) (foldr f init  (cdr xs)))))


#|(= unfold p f g seed
(p seed nil
   (cons (f seed) (unfold p f g (g seed)))))|#


;(= unfold-right ) ;pending


(= (map  (Fn a b) (List a) (List b)) f xs
   (nil? xs nil (cons (f (car xs)) (map f (cdr xs)))))




;;; Filtering & partitioning ;;;

(= (filter (Fn a Bool) (List a) (List a)) f xs
   (nil? xs nil
         (f (car xs) (cons (car xs) (filter f (cdr xs))) (filter f (cdr xs)))))


;;(= partition xs (partition- nil nil (reverse xs)))


(= (remove (Fn a Bool) (List a) (List a)) f xs
   (nil? xs nil
         (f (car xs) (remove f (cdr xs)) (cons (car xs) (remove f (cdr xs))))))




;;; Searching ;;;

(= (find (Fn a Bool) (List a) (Option a)) pred xs
   (nil? xs none
         (pred (car xs) (some (car xs))
               (find pred (cdr xs)))))


(= (find-tail (Fn a Bool) (List a) (List a)) pred xs
   (nil? xs nil
         (pred (car xs) xs
               (find-tail pred (cdr xs)))))


(= (take-while (Fn a Bool) (List a) (List a)) pred xs
   (nil? xs nil
         (pred (car xs)
               (cons (car xs) (take-while pred (cdr xs)))
               nil)))


(= (drop-while (Fn a Bool) (List a) (List a)) pred xs
   (nil? xs nil
         (pred (car xs)
               (drop-while pred (cdr xs))
               xs)))


(= (any? (Fn a Bool) (List a) Bool) pred xs
   (nil? xs false
         (pred (car xs) true (any? pred (cdr xs)))))


(= (every?  (Fn a Bool) (List a) Bool) pred xs
   (nil? xs true
         (pred (car xs) (every? pred (cdr xs)) false)))


(= (list-index (Fn a Bool) (List a) (Option Number)) pred xs
   (nil? xs none
         (pred (car xs) (some 0)
               (opt>>= (list-index pred (cdr xs))
                       (comp some (+ 1))))))


(= (member a (List a) (List a)) x xs
   (nil? xs nil
         (=? (car xs) x xs (member x (cdr xs)))))


(= (delete a (List a) (List a)) x xs
   (nil? xs nil
         (=? (car xs) x
             (delete x (cdr xs))
             (cons (car xs) (delete x (cdr xs))))))


(= (delete-duplicates (List a) (List a)) xs
   (nil? xs nil
         (cons (car xs) (delete-duplicates (delete (car xs) xs)))))




;;; Association lists ;;;

(= (assq a (List (Pair a b)) (Option b)) key axs
   (nil? axs none
         (=? (fst (car axs)) key
             (some (snd (car axs)))
             (assq key (cdr axs)))))


(= (acons a b (List (Pair a b)) (List (Pair a b)))
   key datum axs
   (cons (pair key datum) axs))


(= (alist-copy (List (Pair a b)) (List (Pair a b))) axs
   (nil? axs nil
         (cons (pair (fst (car axs)) (snd (car axs)))
               (alist-copy (cdr axs)))))


(= (alist-delete a (List (Pair a b)) (List (Pair a b))) key axs
   (remove (compose (=? key) fst) axs))




;;; predicate ;;;

(= (list-eq? (List a) (List a) Bool) xs1 xs2
   (nil? xs1 (nil? xs2)
         (=? (car xs1) (car xs2) (list-eq? (cdr xs1) (cdr xs2))
             false)))
