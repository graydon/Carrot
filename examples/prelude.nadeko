;;bool
(synonym Bool (Fn a- a- a-))

(= (true  Bool) t e t)
(= (false Bool) t e e)
(= (not Bool Bool)
   bool (bool false true))
(= (if Bool a a a) bool bool)

;;function
(= (comp (Fn b c) (Fn a b) a c)
   f g x (f (g x)))
(= (compose (Fn b c) (Fn a b) a c) comp)
(= (flip (Fn a b c) b a c)
   f x y (f y x))

(= (id a a) x x)
(= (/> a (Fn a b) b)
   x f (f x))
(= (-> a (Fn b c) (Fn a b) c)
   x f g (f (g x)))
(= (<- a a) x x)
;;e.g. (-> 2 -> (+ 1) -> (+ 4) -> (+ 3) <- (+ 6))


;;tuple
(= (pair a b (Pair a b))
    x y f (f x y))
(= (fst (Pair a b) a) t (t (^ x _ x)))
(= (snd (Pair a b) b) t (t (^ _ y y)))

;;list
(=u (cons a (List a) (List a))
    x y f (f x y))
(=u (nil (List a)) 'nil)
(= (car (List a) a) xs (xs (^ x _ x)))
(= (cdr (List a) (List a)) xs (xs (^ _ xs xs)))
(= (nil? a Bool) x (=? nil x))


;; option
(=u (some a (Option a)) x x)
(=u (none (Option a)) 'nil)
(=  (some? (Option a) Bool) x (not (=? x 'nil)))
(=  (none? (Option a) Bool) x (=? x 'nil))
(=  (pull (Option a) a) x x)
(=  (opt>>= (Option a) (Fn a (Option a)) (Option a))
             opt f (none? opt none (f (pull opt))))


;;Y-combinator
;;(= (Y (Fn a a) a) x (x (Y x)))
;;(Y (^ f f)) ;now f refers to the function itself
(= (Y (Fn a a) a)
   f ((^ x (f (x x))) (^ x (f (x x)))))

;;show
(=u (show _ String) x
    (string? x x
    (number? x (num->str x)
    (keyword? x (kw->str x))
    (nil? x "[]"
    (symbol? x (** symbol->string x)
              (show-list x))))))

(= (show-list (List a) String)
   xs
   (+++ (show (car xs)) " : " (show (cdr xs))))

(= (+++ String String String String) s1 s2 s3
   (++ (++ s1 s2) s3))

;;primitive wrapper
(= (=? a b Bool)
   a b (** =? a b))
(= (< Number Number Bool)
   a b (** lt? a b))
(= (> Number Number Bool)
   a b (** gt? a b))
(= (<= Number Number Bool)
   a b (** lte? a b))
(= (>= Number Number Bool)
   a b (** gte? a b))
(= (+ Number Number Number)
   a b (** add a b))
(= (- Number Number Number)
   a b (** sub a b))
(= (* Number Number Number)
   a b (** mul a b))
(= (/ Number Number Number)
   a b (** div a b))
(= (% Number Number Number)
   a b (** mo a b))
(= (++ String String String)
   a b (** ++ a b))
(= (num->str Number String)
   a (** number->string a))
(= (kw->str Keyword String)
   a (** keyword->string a))
(= (number? a Bool)
   a (** number? a))
(= (string? a Bool)
   a (** string? a))
(= (keyword? a Bool)
   a (** keyword? a))
(= (symbol? a Bool)
   a (** symbol? a))

;;; I/O
(synonym Time Number)

(= (print Time String Time)
   time str (** timed-print time str))
(= (read Time String) t
   (** read- t))

;;help
(= (help String)
   "                                          \n\n\
|  SYNTAX                                     \n\
|  ------                                     \n\
|  ;; declare the type <t> as an alias of <t'>\n\
|  (synonym <t> <t'>)                         \n\
|                                             \n\
|  ;; bind a function to a name               \n\
|  (= (<name> <in-type>... <out-type>)        \n\
|     <parameter>...                          \n\
|     <expression>)                           \n\
|                                             \n\
|  ;; define a constructor for <type>         \n\
|  (=u (<name> <in-type>... <type>)           \n\
|     <parameter>...                          \n\
|     <expression>)                           \n\
|                                             \n\
|  ;; lambda expression                       \n\
|  (^ <parameter>... <expression>)            \n\
|                                             \n\
|  ;; function application                    \n\
|  (<function> <argument>...)                 \n\
|                                             \n\
|  ;; literals                                \n\
|  \"string\" 123456 'symbol :keyword         \n\
|                                             \n\
|  FEATURE                                    \n\
|  -------                                    \n\
|  * Default lazy evaluation                  \n\
|  * Default currying                         \n\
|                                             \n\
|  REPL                                       \n\
|  ----                                       \n\
|  ^C   -- Exit                               \n\
|  help -- See this help                      \n\
|  <function-name> -- See the usage of the function (through its type)\n\n")
